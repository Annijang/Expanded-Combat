plugins {
    id 'net.minecraftforge.gradle' version "${forgegradle_version}"
    id 'idea'
    id 'org.spongepowered.mixin' version "${mixingradle_version}"
}

jarJar.enable()

group = "com.userofbricks.${mod_id}"
version = "${mc_version}-${mod_version}"

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/only_for_datagen/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}
dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")
    jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "${registrate_mc_version_range}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_api_version}")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    implementation(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
    implementation fg.deobf("maven.modrinth:better-combat:${better_combat_version}+${mc_version}-forge")
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_anim_version}")
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : mc_version, minecraft_version_range: mc_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,

            curios_version: curios_version, cloth_config_api_version: cloth_config_api_version,
            better_combat_version: better_combat_version,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.jar.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${modid}.mixins.json"
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}
